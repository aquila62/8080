Test eko.com to see how the cout and cin interface work.

Usage:

eko

cin is a branch vector in CP/M to read one character from
the keyboard, with wait and with no echo.  The output from
the keyboard is returned in the A register.

cout is a branch vector in CP/M to write one character to
the console, with wrap around and scrolling.  The input to
cout is received in the A register.

----------------------------------------------------------

Test ascii.com to display the ASCII character set in
rows of 16 characters.

Usage:

ascii

From the output display, it is easy to calculate the
hex value of each character.  The first row begins with
hex 020h, a space.  The last character on the first row
is hex 02fh, a forward slash.  The next row starts with
030h and ends with 03fh, etc.

The program ends after the 7th row is displayed.

----------------------------------------------------------

Test hx.com to dump memory at a location in hex, specified
by an input parameter.

Usage:

hx address

Example:

hx f000

In this example, Z80 memory is dumped in hex starting at location
0f000h.  16 bytes are dumped on each line, with the current
address as the first word in hex.

The program pauses after each line, waiting for a key to
be pressed on the keyboard.  Hold a key down to cause the
memory dump to proceed continuously.

Terminate the program by entering CTL-Z.

Press any key to continue.

The address parameter defaults to zero.
The error message for an invalid address is "X ?",
where X is an invalid character.

----------------------------------------------------------

Run sieve.com to compute prime numbers from 2 to 2039
using the Sieve of Eratosthenes algorithm.

Usage:

sieve

The output is a list of prime numbers from 2 to 2039.

----------------------------------------------------------

Test the Tower of Hanoi puzzle by running tower.com.
This program uses the iterative solution to the puzzle.
See twr.com below for the recursive solution.
The object of this puzzle is to move all the disks from
stack A to stack C, using stack B as the auxiliary stack.
See the Wikipedia article for the Tower of Hanoi puzzle.

Usage:

tower [#disks]

Where #disks is 2-9.

Default #disks is 3.

The state is printed for every two moves.

The final state is printed after only one move.

Press CTL-Z to quit.

Press any other key to continue.

The total number of moves is (2^n) - 1.

For example, for 5 disks, the total number of moves is 31.

----------------------------------------------------------

Solve the Tower of Hanoi puzzle by running twr.com.
twr.com uses a recursive algorithm to solve the puzzle.
See tower.com above for the iterative solution.
The object of this puzzle is to move all the disks from
stack A to stack C, using stack B as the auxiliary stack.
See the Wikipedia article for the Tower of Hanoi puzzle.

Usage:

twr [#disks]

Where #disks is 2-9.

Default #disks is 3.

The state is printed after every move.

The final state is printed at the end.

Press CTL-Z to quit.

Press any other key to continue.

The total number of moves is (2^n) - 1.

For example, for 5 disks, the total number of moves is 31.

----------------------------------------------------------

See INSTALL for installing this repository on your computer.

See README.8080 for general information about this repository.

This website for this repository is called

http://aquila62.github.io
